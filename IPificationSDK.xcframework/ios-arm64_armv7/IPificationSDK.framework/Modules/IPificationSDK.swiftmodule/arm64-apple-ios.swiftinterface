// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IPificationSDK
import IPificationSDK.CocoaAsyncSocket
import CoreTelephony
import IPificationSDK.DNSResolver
import Foundation
@_exported import IPificationSDK
import Network
import NetworkExtension
import Swift
import UIKit
@_hasMissingDesignatedInitializers public class IMSession {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ConnectionManager {
  public static func checkOnly3G() -> (Swift.Bool, Swift.Bool)
  @objc deinit
}
public protocol ResponseProtocol : AnyObject {
  func getPlainResponse() -> Swift.String
  func getError() -> Swift.String
  func getCode() -> Swift.String?
  func getState() -> Swift.String?
  func isAvailable() -> Swift.Bool
}
public protocol RequestProtocol : AnyObject {
  var readTimeout: Foundation.TimeInterval { get set }
  var connectTimeout: Foundation.TimeInterval { get set }
  var dnsConnectionTimeout: Foundation.TimeInterval { get set }
  var isIPv4PreferredOverIPv6: Swift.Bool { get set }
  func toUri() -> Foundation.URLComponents
  func parseToURLComponents() -> Foundation.URLComponents?
  func formatedHeaders(enableCarrierHeaders: Swift.Bool) -> Swift.String
  var isRedirect: Swift.Bool { get set }
}
public class CoverageService {
  public var debug: Swift.Bool
  public var callbackSuccess: ((IPificationSDK.CoverageResponse) -> Swift.Void)?
  public var callbackFailed: ((IPificationSDK.IPificationException) -> Swift.Void)?
  public var callbackLog: ((Swift.String) -> Swift.Void)?
  public init()
  public func checkCoverage(_ customCoverageRequest: IPificationSDK.CoverageRequest? = nil)
  public func checkCoverage(phoneNumber phone: Swift.String, _ customCoverageRequest: IPificationSDK.CoverageRequest? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IPificationTheme : ObjectiveC.NSObject {
  public func updateScreen(titleColor: UIKit.UIColor, descColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  public func updateScreen(toolbarTitleColor: UIKit.UIColor, cancelBtnColor: UIKit.UIColor, titleColor: UIKit.UIColor, descColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  public static let sharedInstance: IPificationSDK.IPificationTheme
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CoverageResponse : IPificationSDK.ResponseProtocol {
  public func getOperatorCode() -> Swift.String?
  public func isAvailable() -> Swift.Bool
  public func getError() -> Swift.String
  public func getPlainResponse() -> Swift.String
  public func getCode() -> Swift.String?
  public func getState() -> Swift.String?
  @objc deinit
}
public struct IsoCountryInfo {
  public let name: Swift.String
  public let numeric: Swift.String
  public let alpha2: Swift.String
  public let alpha3: Swift.String
  public let calling: Swift.String
  public let currency: Swift.String
  public let continent: Swift.String
  public var flag: Swift.String? {
    get
  }
  public var fractionDigits: Swift.Int
}
@_hasMissingDesignatedInitializers public class IsoCountries {
  public class func flag(countryCode: Swift.String) -> Swift.String?
  public static let allCountries: [IPificationSDK.IsoCountryInfo]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AuthorizationResponse : IPificationSDK.ResponseProtocol {
  public func getPlainResponse() -> Swift.String
  public func getCode() -> Swift.String?
  public func getState() -> Swift.String?
  public func getError() -> Swift.String
  public func isAvailable() -> Swift.Bool
  @objc deinit
}
public class AuthorizationService {
  public var locale: IPificationSDK.IPificationLocale
  public var theme: IPificationSDK.IPificationTheme
  public var debug: Swift.Bool
  public var callbackSuccess: ((IPificationSDK.AuthorizationResponse) -> Swift.Void)?
  public var callbackFailed: ((IPificationSDK.IPificationException) -> Swift.Void)?
  public var callbackIMCanceled: (() -> Swift.Void)?
  public var callbackLog: ((Swift.String) -> Swift.Void)?
  public init()
  public func startAuthorization(_ authRequest: IPificationSDK.AuthorizationRequest? = nil)
  public func startAuthorization(viewController: UIKit.UIViewController, _ authRequest: IPificationSDK.AuthorizationRequest? = nil)
  public func startIMAuthorization(viewController: UIKit.UIViewController, _ authRequest: IPificationSDK.AuthorizationRequest? = nil)
  public func checkIPAddress()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IsoCountryCodes {
  public class func find(key: Swift.String) -> IPificationSDK.IsoCountryInfo?
  public class func searchByName(_ name: Swift.String) -> IPificationSDK.IsoCountryInfo?
  public class func searchByNumeric(_ numeric: Swift.String) -> IPificationSDK.IsoCountryInfo?
  public class func searchByCurrency(_ currency: Swift.String) -> [IPificationSDK.IsoCountryInfo]
  public class func searchByCallingCode(_ calllingCode: Swift.String) -> [IPificationSDK.IsoCountryInfo]
  @objc deinit
}
extension UIDevice {
  public static let deviceModelName: Swift.String
}
public class IPificationIMInstance {
  public init()
  public func viewControllerForLogin() -> UIKit.UIViewController
  @objc deinit
}
public protocol Coordinator : AnyObject {
  var navigationController: UIKit.UINavigationController? { get set }
  var parentCoordinator: IPificationSDK.Coordinator? { get set }
  func start(coordinator: IPificationSDK.Coordinator)
  func didFinish(coordinator: IPificationSDK.Coordinator)
  func removeChildCoordinators()
  func start()
  func pop(_ animated: Swift.Bool)
  func segue(viewController: UIKit.UIViewController, _ animated: Swift.Bool, transition: UIKit.UIView.AnimationOptions?)
}
@_hasMissingDesignatedInitializers public class BaseCoordinator : IPificationSDK.Coordinator {
  public func segue(viewController: UIKit.UIViewController, _ animated: Swift.Bool = false, transition: UIKit.UIView.AnimationOptions? = nil)
  public var navigationController: UIKit.UINavigationController?
  public var parentCoordinator: IPificationSDK.Coordinator?
  public func start()
  public func start(coordinator: IPificationSDK.Coordinator)
  public func didFinish(coordinator: IPificationSDK.Coordinator)
  public func pop(_ animated: Swift.Bool)
  public func removeChildCoordinators()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IPificationLocale : ObjectiveC.NSObject {
  public func updateScreen(titleBar topTitle: Swift.String, title: Swift.String, description: Swift.String, whatsappBtnText: Swift.String, viberBtnText: Swift.String, telegramBtnText: Swift.String, cancelBtnText: Swift.String)
  public static let sharedInstance: IPificationSDK.IPificationLocale
  @objc deinit
}
public enum ResponseType {
  case json
  case xml
  case string
  public static func == (a: IPificationSDK.ResponseType, b: IPificationSDK.ResponseType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class IPificationResponse {
  public var responseType: IPificationSDK.ResponseType
  public func getData() -> Any
  @objc deinit
}
public class CoverageRequest : IPificationSDK.RequestProtocol {
  public var readTimeout: Foundation.TimeInterval
  public var connectTimeout: Foundation.TimeInterval
  public var dnsConnectionTimeout: Foundation.TimeInterval
  public var isIPv4PreferredOverIPv6: Swift.Bool
  public var isRedirect: Swift.Bool
  public init(endpoint: Foundation.URL?, queryParams: [Swift.String : Swift.String]?, headers: [Swift.String : Swift.String]?, connectTimeout: Foundation.TimeInterval, readTimeout: Foundation.TimeInterval, dnsConnectionTimeout: Foundation.TimeInterval)
  public class Builder {
    public init()
    public func addHeader(key: Swift.String, value: Swift.String)
    public func addQueryParam(key: Swift.String, value: Swift.String)
    public func setConnectTimeout(value: Foundation.TimeInterval)
    public func setReadTimeout(value: Foundation.TimeInterval)
    public func setIPv4OverIPv6(value: Swift.Bool)
    public func build() -> IPificationSDK.CoverageRequest
    @objc deinit
  }
  public func toUri() -> Foundation.URLComponents
  public func parseToURLComponents() -> Foundation.URLComponents?
  public func formatedHeaders(enableCarrierHeaders: Swift.Bool) -> Swift.String
  @objc deinit
}
public enum IPEnvironment {
  case SANDBOX
  case PRODUCTION
  public static func == (a: IPificationSDK.IPEnvironment, b: IPificationSDK.IPEnvironment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IPConfiguration : ObjectiveC.NSObject {
  public var enableCarrierHeaders: Swift.Bool
  public var STATE_LENGTH: Swift.Int
  public var CoverageReadTimeout: Swift.Double
  public var CoverageConnectTimeout: Swift.Double
  public var AuthReadTimeout: Swift.Double
  public var AuthConnectTimeout: Swift.Double
  public var COVERAGE_URL: Swift.String
  public var AUTHORIZATION_URL: Swift.String
  public var REDIRECT_URI: Swift.String
  public var CLIENT_ID: Swift.String
  public var CONSENT_ID: Swift.String
  public var ENV: IPificationSDK.IPEnvironment
  public var log: Swift.String
  public var validateIMApps: Swift.Bool
  public var debug: Swift.Bool
  public var customUrls: Swift.Bool
  public static let sharedInstance: IPificationSDK.IPConfiguration
  public var SDK_LOG_URL_STAGE: Swift.String
  public var SDK_LOG_URL_LIVE: Swift.String
  public func generateState() -> Swift.String
  public func generateHeaderLogs(inputPhone: Swift.String, CLIENT_IP: Swift.String?)
  @objc deinit
}
public class AuthorizationRequest : IPificationSDK.RequestProtocol {
  public var readTimeout: Foundation.TimeInterval
  public var connectTimeout: Foundation.TimeInterval
  public var dnsConnectionTimeout: Foundation.TimeInterval
  public var isIPv4PreferredOverIPv6: Swift.Bool
  public var isRedirect: Swift.Bool
  public init()
  public init(endpoint: Foundation.URL)
  public init(endpoint: Foundation.URL?, queryParams: [Swift.String : Swift.String]?, headers: [Swift.String : Swift.String]?, connectTimeout: Foundation.TimeInterval, readTimeout: Foundation.TimeInterval, isIPv4PreferredOverIPv6: Swift.Bool, dnsConnectionTimeout: Foundation.TimeInterval, scope: Swift.String?, state: Swift.String?)
  public class Builder {
    public init()
    public init(url: Swift.String)
    public func addHeader(key: Swift.String, value: Swift.String)
    public func setScope(value: Swift.String)
    public func setState(value: Swift.String)
    public func addQueryParam(key: Swift.String, value: Swift.String)
    public func setConnectTimeout(value: Foundation.TimeInterval)
    public func setReadTimeout(value: Foundation.TimeInterval)
    public func setIPv4OverIPv6(value: Swift.Bool)
    public func build() -> IPificationSDK.AuthorizationRequest
    @objc deinit
  }
  public func toUri() -> Foundation.URLComponents
  public func parseToURLComponents() -> Foundation.URLComponents?
  public func formatedHeaders(enableCarrierHeaders: Swift.Bool) -> Swift.String
  @objc deinit
}
public enum IPificationError {
  case notActive
  case callback_nil
  case request_nil
  case connection_error
  case general
  case cannot_connect
  case validation
  case authorized_failed
  case check_coverage_failed
  case user_cancel
  public static func == (a: IPificationSDK.IPificationError, b: IPificationSDK.IPificationError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct IPificationException : Swift.Error {
  public var localizedDescription: Swift.String {
    get
  }
}
extension IPificationSDK.ResponseType : Swift.Equatable {}
extension IPificationSDK.ResponseType : Swift.Hashable {}
extension IPificationSDK.IPEnvironment : Swift.Equatable {}
extension IPificationSDK.IPEnvironment : Swift.Hashable {}
extension IPificationSDK.IPificationError : Swift.Equatable {}
extension IPificationSDK.IPificationError : Swift.Hashable {}
